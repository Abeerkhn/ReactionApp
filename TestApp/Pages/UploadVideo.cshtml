@page
@model UploadVideoModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Videos</title>
    <!-- We'll still use Bootstrap CSS for basic styling (optional) -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" />
</head>
<body class="bg-light">
    <div class="container py-5 text-center">
        <h2 class="mb-4">Videos</h2>
        <!-- Add Video Button -->
        <button id="openModalBtn" onclick="showModal('addVideoModal')">Add Video</button>

        <!-- Video List Table -->
        <table class="table table-bordered mt-3">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var video in Model.Videos)
                {
                    <tr>
                        <td>@video.Title</td>
                        <td>
                            <button class="btn btn-sm btn-primary" onclick="seeReactions(@video.Id)">See Reactions</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteVideo(@video.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Add Video Modal -->
    <div id="addVideoModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal('addVideoModal')">&times;</span>
            <h2>Add Video</h2>
            <form method="post" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <label for="videoTitle">Title:</label>
                <input type="text" id="videoTitle" name="Title" required class="form-control mb-2" />

                <label for="videoDescription">Description:</label>
                <textarea id="videoDescription" name="Description" class="form-control mb-2"></textarea>

                <label for="videoType">Video Type:</label>
                <select id="videoType" name="VideoType" onchange="toggleVideoInput()" required class="form-select mb-2">
                    <option value="Uploaded">Upload File</option>
                    <option value="YouTube">YouTube URL</option>
                </select>

                <div id="fileUploadSection" class="mb-2">
                    <label for="videoFile">Upload Video:</label>
                    <input type="file" id="videoFile" name="VideoFile" accept="video/*" class="form-control" />
                </div>

                <div id="youtubeUrlSection" style="display: none;" class="mb-2">
                    <label for="videoUrl">YouTube URL:</label>
                    <input type="url" id="videoUrl" name="VideoUrl" class="form-control" />
                </div>

                <!-- Survey Questions Section -->
                <h3>Survey Questions</h3>
                <div id="questionsContainer"></div>
                <button type="button" class="btn btn-secondary mb-2" onclick="addQuestion()">+ Add Question</button>

                <button type="submit" class="btn btn-primary">Upload</button>
            </form>
        </div>
    </div>

    <!-- User Reactions Modal -->
    <div id="userReactionsModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal('userReactionsModal')">&times;</span>
            <h2>Users Who Reacted</h2>
            <ul id="usersList"></ul>
        </div>
    </div>

    <!-- Reactions List Modal -->
    <div id="userReactionsListModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal('userReactionsListModal')">&times;</span>
            <h2>User's Reactions</h2>
            <ul id="reactionsList"></ul>
        </div>
    </div>

    <!-- Reaction Video Modal -->
    <div id="reactionVideoModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal('reactionVideoModal')">&times;</span>
            <h2>Reaction Video</h2>
            <input type="hidden" id="reactionIdHidden" value="" />
            <iframe id="reactionVideoIframe" width="100%" height="400px" frameborder="0" allowfullscreen></iframe>
            <!-- Button to open Survey Responses Modal -->
            <button class="btn btn-secondary mt-2" onclick="openSurveyResponsesModal()">View Survey Responses</button>
        </div>
    </div>

    <!-- Survey Responses Modal -->
    <div id="surveyResponsesModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal('surveyResponsesModal')">&times;</span>
            <h2>Survey Responses</h2>
            <div id="surveyResponsesContainer">
                <!-- Survey responses will be injected here -->
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script>
        // Modal show/hide functions (plain JS)
        function showModal(modalId, previousModalId = null) {
            const modal = document.getElementById(modalId);
            modal.classList.add("show");
            modal.dataset.previousModal = previousModalId;
        }

        function closeModal(modalId) {
            console.log("Closing modal: " + modalId);
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = "none";
                modal.style.visibility = "hidden";
                modal.style.opacity = "0";
            }
        }



        // Toggle video input based on type
        function toggleVideoInput() {
            const videoType = document.getElementById("videoType").value;
            document.getElementById("fileUploadSection").style.display = (videoType === "Uploaded") ? "block" : "none";
            document.getElementById("youtubeUrlSection").style.display = (videoType === "YouTube") ? "block" : "none";
        }

        // Add question dynamically in the upload form
        function addQuestion() {
            const container = document.getElementById("questionsContainer");
            const questionIndex = container.children.length;

            const questionDiv = document.createElement("div");
            questionDiv.className = "question-group";
            questionDiv.innerHTML = `
                <label>Question:</label>
                <input type="text" name="Questions[${questionIndex}].QuestionText" required class="form-control mb-2">
                <div class="answers-container" id="answersContainer${questionIndex}">
                    <label>Answers:</label>
                    <div class="answer-group">
                        <!-- Checkbox comes first -->
                        <input type="checkbox" name="Questions[${questionIndex}].Answers[0].IsCorrect" value="true" onclick="ensureSingleCorrect(this, ${questionIndex})" />
                        <!-- Hidden input follows -->
                        <input type="hidden" name="Questions[${questionIndex}].Answers[0].IsCorrect" value="false" />
                        <input type="text" name="Questions[${questionIndex}].Answers[0].AnswerText" required class="form-control mb-2">
                    </div>
                </div>
                <button type="button" class="btn btn-secondary" onclick="addAnswer(${questionIndex})">+ Add Answer</button>
                <hr>`;
            container.appendChild(questionDiv);
        }



        function ensureSingleCorrect(checkbox, questionIndex) {
            if (checkbox.checked) {
                // Uncheck all other checkboxes in the same question
                const answerContainer = document.getElementById(`answersContainer${questionIndex}`);
                const checkboxes = answerContainer.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(cb => {
                    if (cb !== checkbox) {
                        cb.checked = false;
                    }
                });
            }
        }



        function addAnswer(questionIndex) {
            const answerContainer = document.getElementById(`answersContainer${questionIndex}`);
            const answerIndex = answerContainer.getElementsByClassName("answer-group").length;

            const answerGroupDiv = document.createElement("div");
            answerGroupDiv.className = "answer-group";
            answerGroupDiv.innerHTML = `
                <input type="checkbox" name="Questions[${questionIndex}].Answers[${answerIndex}].IsCorrect" value="true" onclick="ensureSingleCorrect(this, ${questionIndex})" />
                <input type="hidden" name="Questions[${questionIndex}].Answers[${answerIndex}].IsCorrect" value="false" />
                <input type="text" name="Questions[${questionIndex}].Answers[${answerIndex}].AnswerText" required class="form-control mb-2">
            `;
            answerContainer.appendChild(answerGroupDiv);
        }

        // Delete video function (AJAX example)
        function deleteVideo(videoId) {
            if (!confirm("Are you sure you want to delete this video?")) return;

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch(`/UploadVideo?handler=DeleteVideo&videoId=${videoId}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": token
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("Video deleted successfully!");
                        location.reload();
                    } else {
                        alert("Failed to delete video.");
                    }
                })
                .catch(error => console.error("Error deleting video:", error));
        }

        // See reactions
        function seeReactions(videoId) {
            fetch(`/UploadVideo?handler=UserReactions&videoId=${videoId}`)
                .then(response => response.json())
                .then(data => {
                    if (!data.success || !data.users) {
                        alert("No reactions found.");
                        return;
                    }
                    const usersList = document.getElementById("usersList");
                    usersList.innerHTML = "";
                    data.users.forEach(user => {
                        const li = document.createElement("li");
                        li.innerHTML = `<button onclick="fetchUserReactions(${user.reactionId}, ${videoId})">${user.firstName}</button>`;
                        usersList.appendChild(li);
                    });
                    showModal("userReactionsModal");
                })
                .catch(error => console.error("Error fetching reactions:", error));
        }

        function fetchUserReactions(userId, videoId) {
            fetch(`/UploadVideo?handler=ReactionsByUser&userId=${userId}&videoId=${videoId}`)
                .then(response => response.json())
                .then(data => {
                    if (!data || data.length === 0) {
                        alert("No reactions found for this user.");
                        return;
                    }
                    const reactionsList = document.getElementById("reactionsList");
                    reactionsList.innerHTML = "";
                    data.forEach((reaction, index) => {
                        const li = document.createElement("li");
                        li.innerHTML = `<button onclick="fetchReactionVideo(${reaction.id})">Reaction ${index + 1}</button>`;
                        reactionsList.appendChild(li);
                    });
                    showModal("userReactionsListModal", "userReactionsModal");
                })
                .catch(error => console.error("Error fetching user reactions:", error));
        }

        function fetchReactionVideo(reactionId) {
            // Update the hidden field in the reaction video modal
            document.getElementById("reactionIdHidden").value = reactionId;
            fetch(`/UploadVideo?handler=ReactionVideo&reactionId=${reactionId}`)
                .then(response => response.json())
                .then(videoUrl => {
                    if (!videoUrl) {
                        alert("Reaction video not found.");
                        return;
                    }
                    document.getElementById("reactionVideoIframe").src = videoUrl;
                    showModal("reactionVideoModal", "userReactionsListModal");
                })
                .catch(error => console.error("Error fetching reaction video:", error));
        }

        // Functions to open/close survey responses modal
        function openSurveyResponsesModal() {
            let reactionId = document.getElementById("reactionIdHidden").value;
            if (!reactionId) {
                alert("Reaction ID not available.");
                return;
            }
            fetch(`/UploadVideo?handler=GetSurveyResponses&reactionId=${reactionId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.surveyResponses) {
                        let container = document.getElementById("surveyResponsesContainer");
                        container.innerHTML = "";
                        data.surveyResponses.forEach(response => {
                            let div = document.createElement("div");
                            let correctnessText = response.isCorrect ? "Correct" : "Incorrect";
                            div.innerHTML = `<p><strong>Question:</strong> ${response.questionText}</p>
                             <p><strong>Answer:</strong> ${response.answerText} (${correctnessText})</p>
                             <hr/>`;
                            container.appendChild(div);
                        });

                        let modal = document.getElementById("surveyResponsesModal");
                        modal.style.display = "block";
                        modal.style.visibility = "visible";
                        modal.style.opacity = "1";
                    } else {
                        alert("No survey responses found.");
                    }
                })
                .catch(error => console.error("Error fetching survey responses:", error));
        }

        function closeSurveyResponsesModal() {
            let modal = document.getElementById("surveyResponsesModal");
            modal.style.display = "none";
            modal.style.visibility = "hidden";
            modal.style.opacity = "0";
        }

        // Close functions for other modals
        function closeUserReactionsModal() { closeModal("userReactionsModal"); }
        function closeUserReactionsListModal() { closeModal("userReactionsListModal"); }
        function closeReactionVideoModal() {
            document.getElementById("reactionVideoIframe").src = "";
            closeModal("reactionVideoModal");
        }
    </script>
</body>

</html>
<style>
    /* Modal overlay (faded background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Fixed position */
        z-index: 9999; /* On top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        background-color: rgba(0, 0, 0, 0.7); /* Faded dark background */
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }

        /* When modal is active, add a class "show" to display it */
        .modal.show {
            display: block;
            opacity: 1;
            visibility: visible;
        }

        /* Modal content (centered box) */
        .modal .modal-content {
            background-color: #fff;
            margin: 10% auto; /* 10% from top and centered horizontally */
            padding: 20px;
            border-radius: 8px;
            width: 50%; /* Adjust width as needed */
            max-width: 600px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            position: relative;
        }

    /* Close button styling */
    .close-btn {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 20px;
        cursor: pointer;
        z-index: 1001; /* Ensure it's above the modal content */
    }

</style>

