@page
@model UploadVideoModel
@{
    Layout = null;
}

<h2>Videos</h2>

<!-- Add Video Button -->
<button id="openModalBtn" onclick="showModal('addVideoModal')">Add Video</button>

<!-- Video List Table -->
<table border="1">
    <thead>
        <tr>
            <th>Title</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var video in Model.Videos)
        {
            <tr>
                <td>@video.Title</td>
                <td>
                    <button onclick="seeReactions(@video.Id)">See Reactions</button>
                    <button onclick="deleteVideo(@video.Id)">Delete</button>
                </td>

            </tr>
        }
    </tbody>
</table>

<!-- Add Video Modal -->
<!-- Add Video Modal -->
<div id="addVideoModal" class="modal">
    <div class="modal-content">
        <span class="close-btn" onclick="closeModal('addVideoModal')">&times;</span>
        <h2>Add Video</h2>
        <form method="post" enctype="multipart/form-data">
            <label for="videoTitle">Title:</label>
            <input type="text" id="videoTitle" name="Title" required>

            <label for="videoDescription">Description:</label>
            <textarea id="videoDescription" name="Description"></textarea>

            <label for="videoType">Video Type:</label>
            <select id="videoType" name="VideoType" onchange="toggleVideoInput()" required>
                <option value="Uploaded">Upload File</option>
                <option value="YouTube">YouTube URL</option>
            </select>

            <div id="fileUploadSection">
                <label for="videoFile">Upload Video:</label>
                <input type="file" id="videoFile" name="VideoFile" accept="video/*">
            </div>

            <div id="youtubeUrlSection" style="display: none;">
                <label for="videoUrl">YouTube URL:</label>
                <input type="url" id="videoUrl" name="VideoUrl">
            </div>

            <!-- Survey Questions Section -->
            <h3>Survey Questions</h3>
            <div id="questionsContainer"></div>
            <button type="button" onclick="addQuestion()">+ Add Question</button>

            <button type="submit">Upload</button>
        </form>
    </div>
</div>

<script>
  
</script>

<!-- User Reactions Modal -->
<div id="userReactionsModal" class="modal">
    <div class="modal-content">
        <span class="close-btn" onclick="closeUserReactionsModal()">&times;</span>
        <h2>Users Who Reacted</h2>
        <ul id="usersList"></ul>
    </div>
</div>

<!-- Reactions List Modal -->
<div id="userReactionsListModal" class="modal">
    <div class="modal-content">
        <span class="close-btn" onclick="closeUserReactionsListModal()">&times;</span>
        <h2>User's Reactions</h2>
        <ul id="reactionsList"></ul>
    </div>
</div>

<!-- Reaction Video Modal -->
<div id="reactionVideoModal" class="modal">
    <div class="modal-content">
        <span class="close-btn" onclick="closeReactionVideoModal()">&times;</span>
        <h2>Reaction Video</h2>
        <input type="hidden" id="reactionIdHidden" value="" />

        <iframe id="reactionVideoIframe" width="100%" height="400px" frameborder="0" allowfullscreen></iframe>

        <!-- New button to open Survey Responses Modal -->
        <button onclick="openSurveyResponsesModal()">View Survey Responses</button>
    </div>
</div>
<!-- Survey Responses Modal -->
<div id="surveyResponsesModal" class="modal">
    <div class="modal-content">
        <span class="close-btn" onclick="closeSurveyResponsesModal()">&times;</span>
        <h2>Survey Responses</h2>
        <div id="surveyResponsesContainer">
            <!-- Survey responses will be injected here via JavaScript -->
        </div>
    </div>
</div>

<script>
    function openSurveyResponsesModal() {
        let reactionId = document.getElementById("reactionIdHidden").value;
        if (!reactionId) {
            alert("Reaction ID not available.");
            return;
        }
        // Then fetch survey responses using the reactionId:
        fetch(`/UploadVideo?handler=GetSurveyResponses&reactionId=${reactionId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.surveyResponses) {
                    let container = document.getElementById("surveyResponsesContainer");
                    container.innerHTML = ""; // Clear previous content
                    data.surveyResponses.forEach(response => {
                        let div = document.createElement("div");
                        div.innerHTML = `<p><strong>Question:</strong> ${response.questionText}</p>
                                         <p><strong>Answer:</strong> ${response.answerText}</p>
                                         <hr/>`;
                        container.appendChild(div);
                    });
                    // Open the survey responses modal
                    let modal = document.getElementById("surveyResponsesModal");
                    modal.style.display = "block";
                    modal.style.visibility = "visible";
                    modal.style.opacity = "1";
                } else {
                    alert("No survey responses found.");
                }
            })
            .catch(error => console.error("Error fetching survey responses:", error));
    }

    // Function to close the Survey Responses Modal
    function closeSurveyResponsesModal() {
        let modal = document.getElementById("surveyResponsesModal");
        modal.style.display = "none";
        modal.style.visibility = "hidden";
        modal.style.opacity = "0";
    }
    function toggleVideoInput() {
        const videoType = document.getElementById("videoType").value;
        document.getElementById("fileUploadSection").style.display = (videoType === "Uploaded") ? "block" : "none";
        document.getElementById("youtubeUrlSection").style.display = (videoType === "YouTube") ? "block" : "none";
    }

    function addQuestion() {
        const container = document.getElementById("questionsContainer");
        const questionIndex = container.children.length;

        const questionDiv = document.createElement("div");
        questionDiv.className = "question-group";
        questionDiv.innerHTML = `
                    <label>Question:</label>
                    <input type="text" name="Questions[${questionIndex}].QuestionText" required>
                    <div class="answers-container" id="answersContainer${questionIndex}">
                        <label>Answers:</label>
                        <input type="text" name="Questions[${questionIndex}].Answers[0]" required>
                    </div>
                    <button type="button" onclick="addAnswer(${questionIndex})">+ Add Answer</button>
                    <hr>
                `;
        container.appendChild(questionDiv);
    }

    function addAnswer(questionIndex) {
        const answerContainer = document.getElementById(`answersContainer${questionIndex}`);
        const answerIndex = answerContainer.children.length - 1;

        const answerInput = document.createElement("input");
        answerInput.type = "text";
        answerInput.name = `Questions[${questionIndex}].Answers[${answerIndex}]`;
        answerInput.required = true;
        answerContainer.appendChild(answerInput);
    }

    // Delete video function, including the anti-forgery token in the header
    function deleteVideo(videoId) {
        if (!confirm("Are you sure you want to delete this video?")) return;

        const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenElement ? tokenElement.value : "";

        fetch(`/UploadVideo?handler=DeleteVideo&videoId=${videoId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "RequestVerificationToken": token
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Video deleted successfully!");
                    location.reload(); // Refresh the page to update the list
                } else {
                    alert("Failed to delete video.");
                }
            })
            .catch(error => console.error("Error deleting video:", error));
    }

    function seeReactions(videoId) {
        fetch(`/UploadVideo?handler=UserReactions&videoId=${videoId}`)
            .then(response => response.json())
            .then(data => {
                if (!data.success || !data.users) {
                    alert("No reactions found.");
                    return;
                }
                const usersList = document.getElementById("usersList");
                usersList.innerHTML = "";
                data.users.forEach(user => {
                    const li = document.createElement("li");
                    li.innerHTML = `<button onclick="fetchUserReactions(${user.reactionId}, ${videoId})">${user.firstName}</button>`;
                    usersList.appendChild(li);
                });
                showModal("userReactionsModal");
            })
            .catch(error => console.error("Error fetching reactions:", error));
    }

    function fetchUserReactions(userId, videoId) {
        fetch(`/UploadVideo?handler=ReactionsByUser&userId=${userId}&videoId=${videoId}`)
            .then(response => response.json())
            .then(data => {
                if (!data || data.length === 0) {
                    alert("No reactions found for this user.");
                    return;
                }
                const reactionsList = document.getElementById("reactionsList");
                reactionsList.innerHTML = "";
                data.forEach((reaction, index) => {
                    const li = document.createElement("li");
                    li.innerHTML = `<button onclick="fetchReactionVideo(${reaction.id})">Reaction ${index + 1}</button>`;
                    reactionsList.appendChild(li);
                });
                showModal("userReactionsListModal", "userReactionsModal");
            })
            .catch(error => console.error("Error fetching user reactions:", error));
    }

    function fetchReactionVideo(reactionId) {
        // Update the hidden field in the reaction video modal
        document.getElementById("reactionIdHidden").value = reactionId;
        fetch(`/UploadVideo?handler=ReactionVideo&reactionId=${reactionId}`)
            .then(response => response.json())
            .then(videoUrl => {
                if (!videoUrl) {
                    alert("Reaction video not found.");
                    return;
                }
                document.getElementById("reactionVideoIframe").src = videoUrl;

                showModal("reactionVideoModal", "userReactionsListModal");
            })
            .catch(error => console.error("Error fetching reaction video:", error));
    }

    function showModal(modalId, previousModalId = null) {
        const modal = document.getElementById(modalId);
        modal.style.display = "block";
        modal.style.visibility = "visible";
        modal.style.opacity = "1";
        modal.dataset.previousModal = previousModalId;
    }

    function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        modal.style.display = "none";
        modal.style.visibility = "hidden";
        modal.style.opacity = "0";
        const previousModal = modal.dataset.previousModal;
        if (previousModal) {
            showModal(previousModal);
        }
    }

    function closeUserReactionsModal() { closeModal("userReactionsModal"); }
    function closeUserReactionsListModal() { closeModal("userReactionsListModal"); }
    function closeReactionVideoModal() {
        document.getElementById("reactionVideoIframe").src = "";
        closeModal("reactionVideoModal");
    }

    // function toggleVideoInput() {
    //     const videoType = document.getElementById("videoType").value;
    //     const fileUploadSection = document.getElementById("fileUploadSection");
    //     const youtubeUrlSection = document.getElementById("youtubeUrlSection");

    //     if (videoType === "Uploaded") {
    //         fileUploadSection.style.display = "block";
    //         youtubeUrlSection.style.display = "none";
    //     } else {
    //         fileUploadSection.style.display = "none";
    //         youtubeUrlSection.style.display = "block";
    //     }
    // }
</script>

<style>

    
    .modal {
        display: none;
        position: fixed;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        visibility: hidden;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        margin: 10% auto;
        width: 50%;
        position: relative;
        border-radius: 5px;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 20px;
        cursor: pointer;
    }


    .modal {
        display: none;
        position: fixed;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        visibility: hidden;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        margin: 10% auto;
        width: 50%;
        position: relative;
        border-radius: 5px;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 20px;
        cursor: pointer;
    }
</style>
