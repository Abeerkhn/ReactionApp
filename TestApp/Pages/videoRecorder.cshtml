@page
@model VideoRecorderModel
@{
    ViewData["Title"] = "Video Recorder";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <!-- Removed Bootstrap – using plain CSS instead -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <style>
        /* Global Styles */
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
        }
        /* Container & Layout */
        .container {
            max-width: 960px;
            margin: 0 auto;
            padding: 40px 20px;
            text-align: center;
        }

        .d-flex {
            display: flex;
        }

        .justify-content-center {
            justify-content: center;
        }

        .gap-3 {
            gap: 1rem;
        }

        .mb-4 {
            margin-bottom: 1.5rem;
        }
        /* Border and Rounded Corners */
        .border {
            border: 1px solid #ccc;
        }

        .rounded {
            border-radius: 5px;
        }
        /* Button Styles */
        .btn {
            display: inline-block;
            padding: 0.5rem 1rem;
            font-size: 1rem;
            font-weight: 500;
            text-align: center;
            text-decoration: none;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .btn-primary {
            background-color: #0d6efd;
            color: #fff;
        }

            .btn-primary:hover {
                background-color: #0b5ed7;
            }

        .btn-danger {
            background-color: #dc3545;
            color: #fff;
        }

            .btn-danger:hover {
                background-color: #bb2d3b;
            }
        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-box {
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            width: 400px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .modal-header,
        .modal-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.25rem;
            margin: 0;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
        }

        .modal-body {
            margin: 1rem 0;
        }
    </style>
</head>
<body>
    <!-- Instructions Modal (Displayed on page load) -->
    <div id="instructionsModal" class="modal-overlay" style="display: flex;">
        <div class="modal-box">
            <div class="modal-header">
                <h5 class="modal-title">Instructions</h5>
            </div>
            <div class="modal-body">
                <p>1️⃣ Watch the Full Video</p>
                <p>2️⃣ Attempt the Quiz</p>
                <button id="gotItBtn" class="btn btn-primary">Got it!</button>
            </div>
        </div>
    </div>

    <div class="container">
        @* Video Container *@
        <div class="d-flex justify-content-center mb-4">
            @if (Model.SelectedVideo.VideoType == TestApp.Model.VideoType.YouTube)
            {
                var videoId = Model.ExtractYouTubeVideoId(Model.SelectedVideo.VideoUrl);
                <!-- YouTube embed with controls hidden -->
                <iframe id="videoFrame" width="560" height="315" class="border rounded"
                        src="https://www.youtube.com/embed/@videoId?enablejsapi=1&controls=0"
                        frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowfullscreen>
                </iframe>
            }
            else
            {
                <!-- HTML5 video without default controls -->
                <video id="videoFrame" width="560" height="315" class="border rounded">
                    <source src="@Model.SelectedVideo.VideoUrl" type="video/mp4">
                    Your browser does not support the video tag.
                </video>
            }
        </div>

        <!-- Custom Play/Pause Control -->
        <div class="d-flex justify-content-center gap-3 mb-4">
            <button id="playPauseBtn" class="btn btn-primary">Play</button>
        </div>

        <video id="cameraFeed" width="320" height="240" autoplay style="display: none;"></video>
        <form id="videoUploadForm" method="post" enctype="multipart/form-data">
            @Html.AntiForgeryToken()
        </form>

        @* Survey Modal and other elements remain unchanged *@
    </div>

    <!-- Survey Modal -->
    <div id="surveyModal" class="modal-overlay">
        <div class="modal-box">
            <div class="modal-header">
                <h5 class="modal-title">Survey Questions</h5>
                <button class="close-btn" onclick="closeSurveyModal()">×</button>
            </div>
            <div class="modal-body">
                <form id="surveyForm" method="post" asp-page-handler="SubmitSurvey">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="userId" name="UserId" value="@Model.UserId" />
                    <input type="hidden" id="reactionId" name="ReactionId" value="@Model.ReactionId" />
                    @{
                        int i = 0;
                    }
                    @foreach (var question in Model.SelectedVideo.Survey.Questions)
                    {
                        <div class="mb-3 survey-question" data-question-id="@question.Id">
                            <p><strong>@question.QuestionText</strong></p>
                            <input type="hidden" name="SurveyResponses[@i].QuestionId" value="@question.Id" />
                            @foreach (var answer in question.Answers)
                            {
                                <div>
                                    <input type="radio" name="SurveyResponses[@i].SelectedAnswerId" value="@answer.Id" />
                                    <label>@answer.AnswerText</label>
                                </div>
                            }
                        </div>
                        i++;
                    }
                    <button type="submit" class="btn btn-primary">Submit Survey</button>
                </form>
            </div>
        </div>
    </div>

    <script>
        let player;
        let isRecording = false;
        let mediaRecorder;
        let recordedChunks = [];
        let stream;

        // On "Got it!" click, attempt to request camera and microphone access.
        document.getElementById("gotItBtn").addEventListener("click", async function () {
            try {
                const testStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                testStream.getTracks().forEach(track => track.stop());
                document.getElementById("instructionsModal").style.display = "none";
            } catch (error) {
                alert("Camera and microphone permissions are required to continue. Please allow access to proceed.");
            }
        });

        // Toggle play/pause functionality for both HTML5 and YouTube players.
        document.getElementById("playPauseBtn").addEventListener("click", function () {
            // For YouTube
            if (@(Model.SelectedVideo.VideoType == TestApp.Model.VideoType.YouTube ? "true" : "false")) {
                if (player && player.getPlayerState() === YT.PlayerState.PLAYING) {
                    player.pauseVideo();
                    this.innerText = "Play";
                } else if (player) {
                    player.playVideo();
                    this.innerText = "Pause";
                }
            } else {
                // For HTML5 video
                const video = document.getElementById("videoFrame");
                if (video.paused) {
                    video.play();
                    this.innerText = "Pause";
                } else {
                    video.pause();
                    this.innerText = "Play";
                }
            }
        });

        // Existing event listeners for HTML5 video playback
        document.addEventListener("DOMContentLoaded", function () {
            const videoElement = document.getElementById("videoFrame");
            if (videoElement && videoElement.tagName.toLowerCase() === "video") {
                videoElement.addEventListener("play", startVideoRecording);
                videoElement.addEventListener("ended", stopVideoRecording);
            }
        });

        // Load YouTube API if needed
        if (@(Model.SelectedVideo.VideoType == TestApp.Model.VideoType.YouTube ? "true" : "false")) {
            let scriptTag = document.createElement('script');
            scriptTag.src = "https://www.youtube.com/iframe_api";
            document.head.appendChild(scriptTag);
        }

        function onYouTubeIframeAPIReady() {
            let videoId = "@Model.ExtractYouTubeVideoId(Model.SelectedVideo.VideoUrl)";
            if (!videoId) {
                console.error("Invalid YouTube URL");
                return;
            }
            player = new YT.Player('videoFrame', {
                videoId: videoId,
                playerVars: { 'autoplay': 0, 'enablejsapi': 1, 'controls': 0 },
                events: { 'onStateChange': onPlayerStateChange }
            });
        }

        function onPlayerStateChange(event) {
            // Optionally sync custom button text based on player state.
            if (event.data === YT.PlayerState.PLAYING) {
                document.getElementById("playPauseBtn").innerText = "Pause";
            } else if (event.data === YT.PlayerState.PAUSED || event.data === YT.PlayerState.ENDED) {
                document.getElementById("playPauseBtn").innerText = "Play";
            }
            if (event.data === YT.PlayerState.PLAYING && !isRecording) {
                startVideoRecording();
            } else if (event.data === YT.PlayerState.ENDED && isRecording) {
                stopVideoRecording();
            }
        }

        function startVideoRecording() {
            if (isRecording) return;
            isRecording = true;
            recordedChunks = [];
            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then(userStream => {
                    stream = userStream;
                    document.getElementById("cameraFeed").srcObject = stream;
                    mediaRecorder = new MediaRecorder(stream, { mimeType: "video/webm" });
                    mediaRecorder.ondataavailable = event => {
                        if (event.data.size > 0) {
                            recordedChunks.push(event.data);
                        }
                    };
                    mediaRecorder.start();
                })
                .catch(err => {
                    console.error("Error accessing camera/microphone:", err);
                    alert("Please allow camera and microphone access.");
                    isRecording = false;
                });
        }

        function openSurveyModal() {
            document.getElementById("surveyModal").style.display = "flex";
        }

        function closeSurveyModal() {
            document.getElementById("surveyModal").style.display = "none";
        }

        document.getElementById("openSurveyModalBtn")?.addEventListener("click", openSurveyModal);

        async function stopVideoRecording() {
            if (!isRecording) return;
            isRecording = false;
            if (mediaRecorder) {
                mediaRecorder.onstop = async () => {
                    const blob = new Blob(recordedChunks, { type: "video/webm" });
                    stream.getTracks().forEach(track => track.stop());
                    const formData = new FormData();
                    formData.append("videoFile", blob, "reaction-video.webm");
                    const authToken = getCookie("AuthToken");
                    if (!authToken) {
                        alert("User not logged in. Please log in again.");
                        return;
                    }
                    const userId = parseUserIdFromToken(authToken);
                    formData.append("userId", userId);
                    const videoId = getParameterByName('videoId');
                    formData.append("videoId", videoId);
                    const csrfTokenElement = document.querySelector("input[name='__RequestVerificationToken']");
                    const csrfToken = csrfTokenElement ? csrfTokenElement.value : "";
                    try {
                        const response = await fetch("/VideoRecorder?handler=UploadVideo", {
                            method: "POST",
                            headers: csrfToken ? { "RequestVerificationToken": csrfToken } : {},
                            body: formData
                        });
                        const data = await response.json();
                        if (data.success) {
                            alert("Reaction video saved successfully!");
                            document.getElementById("reactionId").value = data.reactionId;
                            document.getElementById("userId").value = userId;
                            openSurveyModal();
                        } else {
                            alert("Failed to save the video.");
                        }
                    } catch (error) {
                        alert("Error uploading video. Please try again.");
                    }
                };
                mediaRecorder.stop();
            }
        }

        function getParameterByName(name, url = window.location.href) {
            name = name.replace(/[\[\]]/g, '\\$&');
            const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }

        function getCookie(name) {
            const cookies = document.cookie.split("; ");
            for (let cookie of cookies) {
                const [cookieName, cookieValue] = cookie.split("=");
                if (cookieName === name) {
                    return decodeURIComponent(cookieValue);
                }
            }
            return null;
        }

        function parseUserIdFromToken(token) {
            try {
                const payload = JSON.parse(atob(token.split(".")[1]));
                return payload.sub;
            } catch (error) {
                return null;
            }
        }
    </script>
</body>
</html>
